<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Amplifier</name>
    </assembly>
    <members>
        <member name="P:Amplifier.BaseCompiler.Name">
            <summary>
            Gets or sets the name of the compiler.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Amplifier.BaseCompiler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.BaseCompiler"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Amplifier.BaseCompiler.Devices">
            <summary>
            Gets or sets the devices.
            </summary>
            <value>
            The devices.
            </value>
        </member>
        <member name="P:Amplifier.BaseCompiler.Kernels">
            <summary>
            Gets the kernel functions for the compiler.
            </summary>
            <value>
            The kernels.
            </value>
        </member>
        <member name="M:Amplifier.BaseCompiler.UseDevice(System.Int32)">
            <summary>
            Uses the device for the compiler.
            </summary>
            <param name="deviceId">The device identifier.</param>
        </member>
        <member name="M:Amplifier.BaseCompiler.CompileKernel(System.Type)">
            <summary>
            Compiles the kernel.
            </summary>
            <param name="cls">The CLS.</param>
        </member>
        <member name="M:Amplifier.BaseCompiler.Execute``1(System.String,System.Object[])">
            <summary>
            Executes the specified kernel function name.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="functionName">Name of the function.</param>
            <param name="inputs">The inputs.</param>
            <param name="returnInputVariable">The return result.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.BaseCompiler.GetExec``1">
            <summary>
            Gets the execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amplifier.BaseCompiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Amplifier.DeviceArch">
            <summary>
            Support device architecture by Amplifier
            </summary>
        </member>
        <member name="T:Amplifier.CompileException">
            <summary>
            Catch the Compiler exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Amplifier.CompileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.CompileException"/> class.
            </summary>
        </member>
        <member name="M:Amplifier.CompileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.CompileException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Amplifier.CompileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.CompileException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Amplifier.CompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.CompileException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Amplifier.ExecutionException">
            <summary>
            Catch the execution exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Amplifier.ExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.ExecutionException"/> class.
            </summary>
        </member>
        <member name="M:Amplifier.ExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.ExecutionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Amplifier.Executer`1">
            <summary>
            Execution engine for the kernels
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Dynamic.DynamicObject" />
        </member>
        <member name="F:Amplifier.Executer`1.Compiler">
            <summary>
            The compiler
            </summary>
        </member>
        <member name="M:Amplifier.Executer`1.#ctor(Amplifier.BaseCompiler)">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.Executer`1"/> class.
            </summary>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Amplifier.Executer`1.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0][0]" /> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <exception cref="T:Amplifier.ExecutionException"></exception>
        </member>
        <member name="T:Amplifier.OpenCLCompiler">
            <summary>
            Compiler for OpenCL which will be used to compile kernel created in C# and execute them.
            </summary>
            <seealso cref="T:Amplifier.BaseCompiler" />
        </member>
        <member name="F:Amplifier.OpenCLCompiler._devices">
            <summary>
            The device list
            </summary>
        </member>
        <member name="F:Amplifier.OpenCLCompiler._defaultDevice">
            <summary>
            The default device for the accelerator
            </summary>
        </member>
        <member name="F:Amplifier.OpenCLCompiler._defaultPlatorm">
            <summary>
            The default platorm for the accelerator
            </summary>
        </member>
        <member name="F:Amplifier.OpenCLCompiler._compiledKernels">
            <summary>
            List of all compiled kernels
            </summary>
        </member>
        <member name="F:Amplifier.OpenCLCompiler._context">
            <summary>
            The computer context with 
            </summary>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Amplifier.OpenCLCompiler"/> class.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCLCompiler.Devices">
            <summary>
            Gets or sets the devices.
            </summary>
            <value>
            The devices.
            </value>
        </member>
        <member name="P:Amplifier.OpenCLCompiler.Kernels">
            <summary>
            Gets the kernel functions for the compiler.
            </summary>
            <value>
            The kernels.
            </value>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.CompileKernel(System.Type)">
            <summary>
            Compiles the kernel.
            </summary>
            <param name="cls">The CLS.</param>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.Execute``1(System.String,System.Object[])">
            <summary>
            Executes the specified kernel function name.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="functionName">Name of the function.</param>
            <param name="inputs">The inputs.</param>
            <param name="returnInputVariable">The return result.</param>
            <returns></returns>
            <exception cref="T:Amplifier.ExecutionException">
            </exception>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.UseDevice(System.Int32)">
            <summary>
            Uses the device for the compiler.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <exception cref="T:System.Exception">No device found. Please invoke Accelerator.Init with a device id to initialize. " +
                                "If you have done the Init and still getting the error please check if OpenCL is installed.</exception>
            <exception cref="T:System.ArgumentException">Device ID out of range.</exception>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.LoadDevices">
            <summary>
            Loads the devices.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.GetKernelCode(System.Type)">
            <summary>
            Gets the kernel code.
            </summary>
            <param name="kernalClass">The kernal class.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.CreateKernels(System.String,System.String)">
            <summary>
            Creates the kernels.
            </summary>
            <param name="name">The name.</param>
            <param name="code">The code.</param>
            <exception cref="T:Amplifier.CompileException"></exception>
        </member>
        <member name="M:Amplifier.OpenCLCompiler.BuildKernelArguments``1(System.Object[],Amplifier.OpenCL.Cloo.ComputeKernel,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Builds the kernel arguments.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="inputs">The inputs.</param>
            <param name="kernel">The kernel.</param>
            <param name="length">The length.</param>
            <param name="returnInputVariable">The return result.</param>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CL10">
            <summary>
            Contains bindings to the OpenCL 1.0 functions.
            </summary>
            <remarks> See the OpenCL specification for documentation regarding these functions. </remarks>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.Bindings.CL10.libName">
            <summary>
            The name of the library that contains the available OpenCL function points.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetPlatformIDs(System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle[],System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetPlatformInfo(Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle,Amplifier.OpenCL.Cloo.ComputePlatformInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetDeviceIDs(Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle,Amplifier.OpenCL.Cloo.ComputeDeviceTypes,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle[],System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetDeviceInfo(Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle,Amplifier.OpenCL.Cloo.ComputeDeviceInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateContext(System.IntPtr[],System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle[],Amplifier.OpenCL.Cloo.Bindings.ComputeContextNotifier,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateContextFromType(System.IntPtr[],Amplifier.OpenCL.Cloo.ComputeDeviceTypes,Amplifier.OpenCL.Cloo.Bindings.ComputeContextNotifier,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainContext(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseContext(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetContextInfo(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeContextInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateCommandQueue(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainCommandQueue(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseCommandQueue(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetCommandQueueInfo(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetCommandQueueProperty(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags,System.Boolean,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateBuffer(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.IntPtr,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateImage2D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateImage3D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainMemObject(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseMemObject(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetSupportedImageFormats(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeMemoryType,System.Int32,Amplifier.OpenCL.Cloo.ComputeImageFormat[],System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetMemObjectInfo(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.ComputeMemoryInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetImageInfo(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.ComputeImageInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateSampler(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,System.Boolean,Amplifier.OpenCL.Cloo.ComputeImageAddressing,Amplifier.OpenCL.Cloo.ComputeImageFiltering,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainSampler(Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseSampler(Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetSamplerInfo(Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle,Amplifier.OpenCL.Cloo.ComputeSamplerInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateProgramWithSource(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,System.Int32,System.String[],System.IntPtr[],Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateProgramWithBinary(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle[],System.IntPtr[],System.IntPtr[],System.Int32[],Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainProgram(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseProgram(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.BuildProgram(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle[],System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.UnloadCompiler">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetProgramInfo(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle,Amplifier.OpenCL.Cloo.ComputeProgramInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetProgramBuildInfo(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle,Amplifier.OpenCL.Cloo.ComputeProgramBuildInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateKernel(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle,System.String,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateKernelsInProgram(Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle[],System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainKernel(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseKernel(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Byte@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.UInt16@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Int16@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.UInt32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.UInt64@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Int64@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Single@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.SetKernelArg(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr,System.Double@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetKernelInfo(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,Amplifier.OpenCL.Cloo.ComputeKernelInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetKernelWorkGroupInfo(Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle,Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.WaitForEvents(System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetEventInfo(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle,Amplifier.OpenCL.Cloo.ComputeEventInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.RetainEvent(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.ReleaseEvent(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetEventProfilingInfo(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle,Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.Flush(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.Finish(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueReadBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueWriteBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueCopyBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueReadImage(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueWriteImage(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueCopyImage(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueCopyImageToBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueCopyBufferToImage(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.IntPtr,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueMapBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueMapImage(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr@,System.IntPtr@,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueUnmapMemObject(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueNDRangeKernel(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,System.IntPtr[],System.IntPtr[],System.IntPtr[],System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueTask(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueMarker(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueWaitForEvents(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueBarrier(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetExtensionFunctionAddress(System.String)">
            <summary>
            Gets the extension function address for the given function name,
            or NULL if a valid function can not be found. The client must
            check to make sure the address is not NULL, before using or
            calling the returned function address.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateFromGLBuffer(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateFromGLTexture2D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateFromGLTexture3D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.CreateFromGLRenderbuffer(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetGLObjectInfo(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.ComputeGLObjectType@,System.Int32@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.GetGLTextureInfo(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.ComputeGLTextureInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueAcquireGLObjects(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle[],System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL10.EnqueueReleaseGLObjects(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle[],System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.ComputeContextNotifier">
            <summary>
            A callback function that can be registered by the application to report information on errors that occur in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <param name="errorInfo"> An error string. </param>
            <param name="clDataPtr"> A pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error.</param>
            <param name="clDataSize"> The size of the binary data that is returned by the OpenCL. </param>
            <param name="userDataPtr"> The pointer to the optional user data specified in <paramref name="userDataPtr"/> argument of <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> constructor. </param>
            <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier">
            <summary>
            A callback function that can be registered by the application to report the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> build status.
            </summary>
            <param name="programHandle"> The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> being built. </param>
            <param name="notifyDataPtr"> The pointer to the optional user data specified in <paramref name="notifyDataPtr"/> argument of <see cref="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)"/>. </param>
            <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CL11">
            <summary>
            Contains bindings to the OpenCL 1.1 functions.
            </summary>
            <remarks> See the OpenCL specification for documentation regarding these functions. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.CreateSubBuffer(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeBufferCreateType,Amplifier.OpenCL.Cloo.SysIntX2@,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.SetMemObjectDestructorCallback(Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.ComputeMemoryDestructorNotifer,System.IntPtr)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.CreateUserEvent(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.SetUserEventStatus(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle,System.Int32)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.SetEventCallback(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.ComputeEventCallback,System.IntPtr)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.EnqueueReadBufferRect(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.EnqueueWriteBufferRect(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.EnqueueCopyBufferRect(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,Amplifier.OpenCL.Cloo.SysIntX3@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL11.SetCommandQueueProperty(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags,System.Boolean,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.ComputeMemoryDestructorNotifer">
            <summary>
            A callback function that can be registered by the application.
            </summary>
            <param name="memobj"> The memory object being deleted. When the user callback is called, this memory object is not longer valid. <paramref name="memobj"/> is only provided for reference purposes. </param>
            <param name="user_data"> A pointer to user supplied data. </param>
            /// <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.ComputeEventCallback">
            <summary>
            The event callback function that can be registered by the application.
            </summary>
            <param name="eventHandle"> The event object for which the callback function is invoked. </param>
            <param name="cmdExecStatusOrErr"> Represents the execution status of the command for which this callback function is invoked. If the callback is called as the result of the command associated with the event being abnormally terminated, an appropriate error code for the error that caused the termination will be passed to <paramref name="cmdExecStatusOrErr"/> instead. </param>
            <param name="userData"> A pointer to user supplied data. </param>
            /// <remarks> This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CL12">
            <summary>
            Contains bindings to the OpenCL 1.2 functions.
            </summary>
            <remarks> See the OpenCL specification for documentation regarding these functions. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueMarkerWithWaitList(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueBarrierWithWaitList(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueFillBuffer(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[],Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.GetExtensionFunctionAddressForPlatform(Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle,System.String)">
            <summary>
            Gets the extension function address for the given function name,
            or NULL if a valid function can not be found. The client must
            check to make sure the address is not NULL, before using or 
            calling the returned function address.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.CreateFromGLTexture2D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.CreateFromGLTexture3D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.CreateImage2D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.CreateImage3D(Amplifier.OpenCL.Cloo.Bindings.CLContextHandle,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Amplifier.OpenCL.Cloo.ComputeErrorCode@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueBarrier(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueMarker(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle@)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.EnqueueWaitForEvents(Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle,System.Int32,Amplifier.OpenCL.Cloo.Bindings.CLEventHandle[])">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.GetExtensionFunctionAddress(System.String)">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CL12.UnloadCompiler">
            <summary>
            See the OpenCL specification.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLCommandQueueHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLContextHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLContextHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLContextHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLContextHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLDeviceHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLEventHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLEventHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLEventHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLEventHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLEventHandle.From(System.IntPtr)">
            <summary>
            Creates a handle from an external handle
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLKernelHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLMemoryHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLPlatformHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLProgramHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle">
            <summary>
            Represents the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/> ID.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle.IsValid">
            <summary>
            Gets a logic value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle.Value">
            <summary>
            Gets the value of the handle.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLSamplerHandle.Invalidate">
            <summary>
            Invalidates the handle.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLx">
            <summary>
            Contains bindings to the OpenCL extension functions.
            </summary>
            <remarks> See the Khronos OpenCL API extensions registry for documentation regarding these functions. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.CreateSubDevicesEXT(System.IntPtr,Amplifier.OpenCL.Cloo.cl_device_partition_property_ext[],System.Int32,System.IntPtr[],System.Int32@)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.EnqueueMigrateMemObjectEXT(System.IntPtr,System.Int32,System.IntPtr[],Amplifier.OpenCL.Cloo.cl_mem_migration_flags_ext,System.Int32,System.IntPtr[],System.IntPtr[])">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.GetGLContextInfoKHR(System.IntPtr[],Amplifier.OpenCL.Cloo.ComputeGLContextInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.ReleaseDeviceEXT(System.IntPtr)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.RetainDeviceEXT(System.IntPtr)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx.#ctor(Amplifier.OpenCL.Cloo.ComputePlatform)">
            <summary>
            
            </summary>
            <param name="platform"></param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.Bindings.CLx12">
            <summary>
            Contains bindings to the OpenCL extension functions.
            </summary>
            <remarks> See the Khronos OpenCL API extensions registry for documentation regarding these functions. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.CreateSubDevicesEXT(System.IntPtr,Amplifier.OpenCL.Cloo.cl_device_partition_property_ext[],System.Int32,System.IntPtr[],System.Int32@)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.EnqueueMigrateMemObjectEXT(System.IntPtr,System.Int32,System.IntPtr[],Amplifier.OpenCL.Cloo.cl_mem_migration_flags_ext,System.Int32,System.IntPtr[],System.IntPtr[])">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.GetGLContextInfoKHR(System.IntPtr[],Amplifier.OpenCL.Cloo.ComputeGLContextInfo,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.ReleaseDeviceEXT(System.IntPtr)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.RetainDeviceEXT(System.IntPtr)">
            <summary> </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.Bindings.CLx12.#ctor(Amplifier.OpenCL.Cloo.ComputePlatform)">
            <summary>
            
            </summary>
            <param name="platform"></param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeErrorCode">
            <summary>
            The OpenCL error codes.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.Success">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.DeviceNotFound">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.DeviceNotAvailable">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CompilerNotAvailable">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.MemoryObjectAllocationFailure">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.OutOfResources">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.OutOfHostMemory">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.ProfilingInfoNotAvailable">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.MemoryCopyOverlap">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.ImageFormatMismatch">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.ImageFormatNotSupported">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.BuildProgramFailure">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.MapFailure">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.MisalignedSubBufferOffset">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.ExecutionStatusErrorForEventsInWaitList">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidValue">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidDeviceType">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidPlatform">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidDevice">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidContext">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidCommandQueueFlags">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidCommandQueue">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidHostPointer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidMemoryObject">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidImageFormatDescriptor">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidImageSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidSampler">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidBinary">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidBuildOptions">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidProgram">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidProgramExecutable">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidKernelName">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidKernelDefinition">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidKernel">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidArgumentIndex">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidArgumentValue">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidArgumentSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidKernelArguments">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidWorkDimension">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidWorkGroupSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidWorkItemSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidGlobalOffset">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidEventWaitList">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidEvent">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidOperation">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidGLObject">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidBufferSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidMipLevel">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.InvalidGlobalWorkSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CL_PLATFORM_NOT_FOUND_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CL_DEVICE_PARTITION_FAILED_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CL_INVALID_PARTITION_COUNT_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeErrorCode.CL_INVALID_PARTITION_NAME_EXT">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.OpenCLVersion">
            <summary>
            The OpenCL version.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.OpenCLVersion.Version_1_0">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.OpenCLVersion.Version_1_1">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeBoolean">
            <summary>
            The OpenCL boolean values expressed as integers.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeBoolean.False">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeBoolean.True">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputePlatformInfo">
            <summary>
            The platform info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.Profile">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.Version">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.Name">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.Vendor">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.Extensions">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputePlatformInfo.CL_PLATFORM_ICD_SUFFIX_KHR">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceTypes">
            <summary>
            The types of devices.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceTypes.Default">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceTypes.Cpu">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceTypes.Gpu">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceTypes.Accelerator">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceTypes.All">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceInfo">
            <summary>
            The device info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Type">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.VendorId">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxComputeUnits">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxWorkItemDimensions">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxWorkGroupSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxWorkItemSizes">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthChar">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthShort">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthInt">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthLong">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthFloat">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthDouble">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxClockFrequency">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.AddressBits">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxReadImageArguments">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxWriteImageArguments">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxMemoryAllocationSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Image2DMaxWidth">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Image2DMaxHeight">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Image3DMaxWidth">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Image3DMaxHeight">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Image3DMaxDepth">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.ImageSupport">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxParameterSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxSamplers">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MemoryBaseAddressAlignment">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MinDataTypeAlignmentSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.SingleFPConfig">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.GlobalMemoryCacheType">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.GlobalMemoryCachelineSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.GlobalMemoryCacheSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.GlobalMemorySize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxConstantBufferSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.MaxConstantArguments">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.LocalMemoryType">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.LocalMemorySize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.ErrorCorrectionSupport">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.ProfilingTimerResolution">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.EndianLittle">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Available">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CompilerAvailable">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.ExecutionCapabilities">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CommandQueueProperties">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Name">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Vendor">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.DriverVersion">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Profile">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Version">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Extensions">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.Platform">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_DOUBLE_FP_CONFIG">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_HALF_FP_CONFIG">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.PreferredVectorWidthHalf">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.HostUnifiedMemory">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthChar">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthShort">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthInt">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthLong">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthFloat">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthDouble">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.NativeVectorWidthHalf">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.OpenCLCVersion">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_PARENT_DEVICE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_PARITION_TYPES_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_AFFINITY_DOMAINS_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_REFERENCE_COUNT_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceInfo.CL_DEVICE_PARTITION_STYLE_EXT">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.Denorm">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.InfNan">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.RoundToNearest">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.RoundToZero">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.RoundToInf">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.Fma">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities.SoftFloat">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType.None">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType.ReadOnlyCache">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType.ReadWriteCache">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceLocalMemoryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceLocalMemoryType.Local">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceLocalMemoryType.Global">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDeviceExecutionCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceExecutionCapabilities.OpenCLKernel">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeDeviceExecutionCapabilities.NativeKernel">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags.None">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags.OutOfOrderExecution">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags.Profiling">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeContextInfo">
            <summary>
            The context info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextInfo.Devices">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextInfo.Properties">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextInfo.NumDevices">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextInfo.Platform">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.Platform">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.CL_GL_CONTEXT_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.CL_EGL_DISPLAY_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.CL_GLX_DISPLAY_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.CL_WGL_HDC_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeContextPropertyName.CL_CGL_SHAREGROUP_KHR">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo">
            <summary>
            The command queue info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo.Context">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo.Device">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandQueueInfo.Properties">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeMemoryFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.None">
            <summary> Let the OpenCL choose the default flags. </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.ReadWrite">
            <summary> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> will be accessible from the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> for read and write operations. </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.WriteOnly">
            <summary> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> will be accessible from the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> for write operations only. </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.ReadOnly">
            <summary> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> will be accessible from the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> for read operations only. </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.UseHostPointer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.AllocateHostPointer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.CopyHostPointer">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.R">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.A">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.RG">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.RA">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Rgb">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Rgba">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Bgra">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Argb">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Intensity">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Luminance">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Rx">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Rgx">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder.Rgbx">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageChannelType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.SNormInt8">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.SNormInt16">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UNormInt8">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UNormInt16">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UNormShort565">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UNormShort555">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UNormInt101010">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.SignedInt8">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.SignedInt16">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.SignedInt32">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UnsignedInt8">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UnsignedInt16">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.UnsignedInt32">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.HalfFloat">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageChannelType.Float">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeMemoryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryType.Buffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryType.Image2D">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryType.Image3D">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeMemoryInfo">
            <summary>
            The memory info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.Type">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.Flags">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.Size">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.HostPointer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.MapppingCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.Context">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.AssociatedMemoryObject">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryInfo.Offset">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageInfo">
            <summary>
            The image info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.Format">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.ElementSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.RowPitch">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.SlicePitch">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.Width">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.Height">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageInfo.Depth">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageAddressing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageAddressing.None">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageAddressing.ClampToEdge">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageAddressing.Clamp">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageAddressing.Repeat">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageAddressing.MirroredRepeat">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageFiltering">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageFiltering.Nearest">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeImageFiltering.Linear">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeSamplerInfo">
            <summary>
            The sampler info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeSamplerInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeSamplerInfo.Context">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeSamplerInfo.NormalizedCoords">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeSamplerInfo.Addressing">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeSamplerInfo.Filtering">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags.Read">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags.Write">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeProgramInfo">
            <summary>
            The program info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.Context">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.DeviceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.Devices">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.Source">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.BinarySizes">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramInfo.Binaries">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeProgramBuildInfo">
            <summary>
            The program build info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildInfo.Status">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildInfo.Options">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildInfo.BuildLog">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus.Success">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus.None">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus.Error">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus.InProgress">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeKernelInfo">
            <summary>
            The kernel info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelInfo.FunctionName">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelInfo.ArgumentCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelInfo.Context">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelInfo.Program">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo">
            <summary>
            The kernel work-group info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo.WorkGroupSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo.CompileWorkGroupSize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo.LocalMemorySize">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo.PreferredWorkGroupSizeMultiple">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeKernelWorkGroupInfo.PrivateMemorySize">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeEventInfo">
            <summary>
            The event info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeEventInfo.CommandQueue">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeEventInfo.CommandType">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeEventInfo.ReferenceCount">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeEventInfo.ExecutionStatus">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeEventInfo.Context">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.NDRangeKernel">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.Task">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.NativeKernel">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.ReadBuffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.WriteBuffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CopyBuffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.ReadImage">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.WriteImage">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CopyImage">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CopyImageToBuffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CopyBufferToImage">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.MapBuffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.MapImage">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.UnmapMemory">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.Marker">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.AcquireGLObjects">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.ReleaseGLObjects">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.ReadBufferRectangle">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.WriteBufferRectangle">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CopyBufferRectangle">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.User">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandType.CL_COMMAND_MIGRATE_MEM_OBJECT_EXT">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus.Complete">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus.Running">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus.Submitted">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus.Queued">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeBufferCreateType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeBufferCreateType.Region">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo">
            <summary>
            The command profiling info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo.Queued">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo.Submitted">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo.Started">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeCommandProfilingInfo.Ended">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeGLObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLObjectType.Buffer">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLObjectType.Texture2D">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLObjectType.Texture3D">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLObjectType.Renderbuffer">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeGLTextureInfo">
            <summary>
            The shared CL/GL image/texture info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLTextureInfo.TextureTarget">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLTextureInfo.MipMapLevel">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeGLContextInfo">
            <summary>
            The shared CL/GL context info query symbols.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLContextInfo.CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.ComputeGLContextInfo.CL_DEVICES_FOR_GL_CONTEXT_KHR">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_DEVICE_PARTITION_EQUALLY_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_DEVICE_PARTITION_BY_COUNTS_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_DEVICE_PARTITION_BY_NAMES_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_L1_CACHE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_L2_CACHE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_L3_CACHE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_L4_CACHE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_NUMA_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_PROPERTIES_LIST_END_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_PARTITION_BY_COUNTS_LIST_END_EXT">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_device_partition_property_ext.CL_PARTITION_BY_NAMES_LIST_END_EXT">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.cl_mem_migration_flags_ext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_mem_migration_flags_ext.None">
            <summary> </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.cl_mem_migration_flags_ext.CL_MIGRATE_MEM_OBJECT_HOST_EXT">
            <summary> </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1">
            <summary>
            Represents an OpenCL buffer.
            </summary>
            <typeparam name="T"> The type of the elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. <typeparamref name="T"/> is restricted to value types and <c>struct</c>s containing such types. </typeparam>
            <remarks> A memory object that stores a linear collection of bytes. Buffer objects are accessible using a pointer in a kernel executing on a device. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int64)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> used to create the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="count"> The number of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> used to create the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="count"> The number of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="dataPtr"> A pointer to the data for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,`0[])">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> used to create the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="data"> The data for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <remarks> Note, that <paramref name="data"/> cannot be an "immediate" parameter, i.e.: <c>new T[100]</c>, because it could be quickly collected by the GC causing Amplifier.OpenCL.Cloo to send and invalid reference to OpenCL. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.CreateFromGLBuffer``1(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/> from an existing OpenGL buffer object.
            </summary>
            <typeparam name="TDataType"> The type of the elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. <typeparamref name="T"/> should match the type of the elements in the OpenGL buffer. </typeparam>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. Only <see cref="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.ReadOnly"/>, <see cref="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.WriteOnly"/> and <see cref="F:Amplifier.OpenCL.Cloo.ComputeMemoryFlags.ReadWrite"/> are allowed. </param>
            <param name="bufferId"> The OpenGL buffer object id to use for the creation of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <returns> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.Clone">
            <summary>
            Clones the ComputeBuffer. Because the buffer is retained the cloned buffer as well as the clone have to be disposed
            </summary>
            <returns>Cloned buffer</returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.From(Amplifier.OpenCL.Cloo.ComputeMemory)">
            <summary>
            Creates a new ComputeBuffer from an ComputeMemory. Because the memory is retained the cloned buffer as well as the clone have to be disposed
            </summary>
            <param name="memory"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBuffer`1.From(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeContext)">
            <summary>
            Creates a new ComputeBuffer from external memory handles.
            </summary>
            <param name="handle"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeBufferBase`1">
            <summary>
            Represents the parent type to any Cloo buffer types.
            </summary>
            <typeparam name="T"> The type of the elements of the buffer. </typeparam>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.Count">
            <summary>
            Gets the number of elements in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBufferBase`1"/>.
            </summary>
            <value> The number of elements in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBufferBase`1"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.ReferenceCount">
            <summary>
            Gets the current reference count of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBufferBase`1"/>.
            </summary>
            <value> The current reference count of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBufferBase`1"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.Init(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.Init(System.Int64,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeBufferBase`1.Clone">
            <summary>
            Clones the ComputeBuffer. Because the buffer is retained the cloned buffer as well as the clone have to be disposed
            </summary>
            <returns>Cloned buffer</returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue">
            <summary>
            Represents an OpenCL command queue.
            </summary>
            <remarks> A command queue is an object that holds commands that will be executed on a specific device. The command queue is created on a specific device in a context. Commands to a command queue are queued in-order but may be executed in-order or out-of-order. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Int64,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source buffer to a destination buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="sourceSlicePitch"> The size of a 2D slice of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationSlicePitch"> The size of a 2D slice of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBufferToImage``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeImage,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a buffer to an image.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="source"/>. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBufferToImage``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeImage2D,System.Int64,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a buffer to an image.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="source"/>. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyBufferToImage``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeImage3D,System.Int64,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a buffer to an image.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="source"/>. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImage(Amplifier.OpenCL.Cloo.ComputeImage,Amplifier.OpenCL.Cloo.ComputeImage,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source image to a destination image.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImage(Amplifier.OpenCL.Cloo.ComputeImage2D,Amplifier.OpenCL.Cloo.ComputeImage2D,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source image to a destination image.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImage(Amplifier.OpenCL.Cloo.ComputeImage2D,Amplifier.OpenCL.Cloo.ComputeImage3D,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source image to a destination image.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImage(Amplifier.OpenCL.Cloo.ComputeImage3D,Amplifier.OpenCL.Cloo.ComputeImage2D,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source image to a destination image.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImage(Amplifier.OpenCL.Cloo.ComputeImage3D,Amplifier.OpenCL.Cloo.ComputeImage3D,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a source image to a destination image.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImageToBuffer``1(Amplifier.OpenCL.Cloo.ComputeImage,Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from an image to a buffer.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="destination"/>. </typeparam>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImageToBuffer``1(Amplifier.OpenCL.Cloo.ComputeImage2D,Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from an image to a buffer.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="destination"/>. </typeparam>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.CopyImageToBuffer``1(Amplifier.OpenCL.Cloo.ComputeImage3D,Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from a 3D image to a buffer.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="destination"/>. </typeparam>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[]@,System.Boolean,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[]@,System.Boolean,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[0:,0:]@,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[0:,0:,0:]@,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[0:,0:]@,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[0:,0:,0:]@,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="destination"> The array to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="sourceSlicePitch"> The size of a 2D slice of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationSlicePitch"> The size of a 2D slice of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromImage(Amplifier.OpenCL.Cloo.ComputeImage,System.IntPtr,System.Boolean,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from an image.
            </summary>
            <param name="source"> The image to read from. </param>
            <param name="destination"> A valid pointer to a preallocated memory area to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromImage(Amplifier.OpenCL.Cloo.ComputeImage2D,System.IntPtr,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from an image.
            </summary>
            <param name="source"> The image to read from. </param>
            <param name="destination"> A valid pointer to a preallocated memory area to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromImage(Amplifier.OpenCL.Cloo.ComputeImage3D,System.IntPtr,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from an image.
            </summary>
            <param name="source"> The image to read from. </param>
            <param name="destination"> A valid pointer to a preallocated memory area to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromImage(Amplifier.OpenCL.Cloo.ComputeImage2D,System.IntPtr,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from an image.
            </summary>
            <param name="source"> The image to read from. </param>
            <param name="destination"> A valid pointer to a preallocated memory area to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="sourceRowPitch"> The size of a row of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReadFromImage(Amplifier.OpenCL.Cloo.ComputeImage3D,System.IntPtr,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from an image.
            </summary>
            <param name="source"> The image to read from. </param>
            <param name="destination"> A valid pointer to a preallocated memory area to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="sourceRowPitch"> The size of a row of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="sourceSlicePitch"> The size of a 2D slice of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[0:,0:],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[0:,0:,0:],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[0:,0:],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToBuffer``1(``0[0:,0:,0:],Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <typeparam name="T"> The type of data in the buffer. </typeparam>
            <param name="source"> The array to read from. </param>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="sourceRowPitch"> The size of a row of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationRowPitch"> The size of a row of elements of <paramref name="destination"/> in bytes. </param>
            <param name="sourceSlicePitch"> The size of a 2D slice of elements of <paramref name="source"/> in bytes. </param>
            <param name="destinationSlicePitch"> The size of a 2D slice of elements of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToImage(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeImage,System.Boolean,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to an image.
            </summary>
            <param name="source"> A pointer to a memory area to read from. </param>
            <param name="destination"> The image to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToImage(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeImage2D,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to an image.
            </summary>
            <param name="source"> A pointer to a memory area to read from. </param>
            <param name="destination"> The image to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToImage(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeImage3D,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to an image.
            </summary>
            <param name="source"> A pointer to a memory area to read from. </param>
            <param name="destination"> The image to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToImage(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeImage2D,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX2,Amplifier.OpenCL.Cloo.SysIntX2,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to an image.
            </summary>
            <param name="source"> A pointer to a memory area to read from. </param>
            <param name="destination"> The image to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="destinationRowPitch"> The size of a row of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.WriteToImage(System.IntPtr,Amplifier.OpenCL.Cloo.ComputeImage3D,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to an image.
            </summary>
            <param name="source"> A pointer to a memory area to read from. </param>
            <param name="destination"> The image to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="destinationRowPitch"> The size of a row of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="destinationSlicePitch"> The size of a 2D slice of pixels of <paramref name="destination"/> in bytes. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Device">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.OutOfOrderExecution">
            <summary>
            Gets the out-of-order execution mode of the commands in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
            <value> Is <c>true</c> if <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> has out-of-order execution mode enabled and <c>false</c> otherwise. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Profiling">
            <summary>
            Gets the profiling mode of the commands in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
            <value> Is <c>true</c> if <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> has profiling enabled and <c>false</c> otherwise. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeDevice,Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="device"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> associated with the <paramref name="context"/>. It can either be one of <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/> or have the same <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceTypes"/> as the <paramref name="device"/> specified when the <paramref name="context"/> is created. </param>
            <param name="properties"> The properties for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,System.IntPtr)">
            <summary>
            Creates a <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> from an externalHandle.
            </summary>
            <param name="context"></param>
            <param name="externalHandle"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AcquireGLObjects(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeMemory},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to acquire a collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>s that have been previously created from OpenGL objects.
            </summary>
            <param name="memObjs"> A collection of OpenCL memory objects that correspond to OpenGL objects. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AddBarrier">
            <summary>
            Enqueues a barrier.
            </summary>
            <remarks> A barrier ensures that all queued commands have finished execution before the next batch of commands can begin execution. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AddMarker">
            <summary>
            Enqueues a marker.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AddMarkerWithWaitList(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.
            </summary>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.2. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AddBarrierWithWaitList(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            A synchronization point that enqueues a barrier operation.
            </summary>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.2. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Copy``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Int64,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data between buffers.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Copy``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy a 2D or 3D region of elements between two buffers.
            </summary>
            <typeparam name="T"> The type of data in the buffers. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="sourceRowPitch"> The size of the source buffer row in bytes. If set to zero then <paramref name="sourceRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="sourceSlicePitch"> The size of the source buffer 2D slice in bytes. If set to zero then <paramref name="sourceSlicePitch"/> equals <c>region.Y * sizeof(T) * sourceRowPitch</c>. </param>
            <param name="destinationRowPitch"> The size of the destination buffer row in bytes. If set to zero then <paramref name="destinationRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="destinationSlicePitch"> The size of the destination buffer 2D slice in bytes. If set to zero then <paramref name="destinationSlicePitch"/> equals <c>region.Y * sizeof(T) * destinationRowPitch</c>. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Copy``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.ComputeImage,System.Int64,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from buffer to <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <typeparam name="T"> The type of data in <paramref name="source"/>. </typeparam>
            <param name="source"> The buffer to copy from. </param>
            <param name="destination"> The image to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Copy``1(Amplifier.OpenCL.Cloo.ComputeImage,Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data from <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to buffer.
            </summary>
            <param name="source"> The image to copy from. </param>
            <param name="destination"> The buffer to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Copy(Amplifier.OpenCL.Cloo.ComputeImage,Amplifier.OpenCL.Cloo.ComputeImage,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to copy data between <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>s.
            </summary>
            <param name="source"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to copy from. </param>
            <param name="destination"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to copy to. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ExecuteTask(Amplifier.OpenCL.Cloo.ComputeKernel,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to execute a single <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="kernel"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> to execute. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Execute(Amplifier.OpenCL.Cloo.ComputeKernel,System.Int64[],System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to execute a range of <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>s in parallel.
            </summary>
            <param name="kernel"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> to execute. </param>
            <param name="globalWorkOffset"> An array of values that describe the offset used to calculate the global ID of a work-item instead of having the global IDs always start at offset (0, 0,... 0). </param>
            <param name="globalWorkSize"> An array of values that describe the number of global work-items in dimensions that will execute the kernel function. The total number of global work-items is computed as global_work_size[0] *...* global_work_size[work_dim - 1]. </param>
            <param name="localWorkSize"> An array of values that describe the number of work-items that make up a work-group (also referred to as the size of the work-group) that will execute the <paramref name="kernel"/>. The total number of work-items in a work-group is computed as local_work_size[0] *... * local_work_size[work_dim - 1]. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Finish">
            <summary>
            Blocks until all previously enqueued commands are issued to the <see cref="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Device"/> and have completed.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Flush">
            <summary>
            Issues all previously enqueued commands to the <see cref="P:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Device"/>.
            </summary>
            <remarks> This method only guarantees that all previously enqueued commands get issued to the OpenCL device. There is no guarantee that they will be complete after this method returns. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Map``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags,System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to map a part of a buffer into the host address space.
            </summary>
            <param name="buffer"> The buffer to map. </param>
            <param name="blocking">  The mode of operation of this call. </param>
            <param name="flags"> A list of properties for the mapping mode. </param>
            <param name="offset"> The <paramref name="buffer"/> element position where mapping starts. </param>
            <param name="region"> The region of elements to map. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Map(Amplifier.OpenCL.Cloo.ComputeImage,System.Boolean,Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to map a part of a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> into the host address space.
            </summary>
            <param name="image"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to map. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="flags"> A list of properties for the mapping mode. </param>
            <param name="offset"> The <paramref name="image"/> element position where mapping starts. </param>
            <param name="region"> The region of elements to map. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Read``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a buffer.
            </summary>
            <param name="source"> The buffer to read from. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="offset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="destination"> A pointer to a preallocated memory area to read the data into. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Read``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read a 2D or 3D region of elements from a buffer.
            </summary>
            <typeparam name="T"> The type of the elements of the buffer. </typeparam>
            <param name="source"> The buffer to read from. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="sourceRowPitch"> The size of the source buffer row in bytes. If set to zero then <paramref name="sourceRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="sourceSlicePitch"> The size of the source buffer 2D slice in bytes. If set to zero then <paramref name="sourceSlicePitch"/> equals <c>region.Y * sizeof(T) * sourceRowPitch</c>. </param>
            <param name="destinationRowPitch"> The size of the destination buffer row in bytes. If set to zero then <paramref name="destinationRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="destinationSlicePitch"> The size of the destination buffer 2D slice in bytes. If set to zero then <paramref name="destinationSlicePitch"/> equals <c>region.Y * sizeof(T) * destinationRowPitch</c>. </param>
            <param name="destination"> A pointer to a preallocated memory area to read the data into. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Read(Amplifier.OpenCL.Cloo.ComputeImage,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to read data from a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <param name="source"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to read from. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="offset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to read. </param>
            <param name="rowPitch"> The <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.RowPitch"/> of <paramref name="source"/> or 0. </param>
            <param name="slicePitch"> The <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.SlicePitch"/> of <paramref name="source"/> or 0. </param>
            <param name="destination"> A pointer to a preallocated memory area to read the data into. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReleaseGLObjects(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeMemory},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to release <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>s that have been created from OpenGL objects.
            </summary>
            <param name="memObjs"> A collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>s that correspond to OpenGL memory objects. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Unmap(Amplifier.OpenCL.Cloo.ComputeMemory,System.IntPtr@,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to unmap a buffer or a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> from the host address space.
            </summary>
            <param name="memory"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>. </param>
            <param name="mappedPtr"> The host address returned by a previous call to <see cref="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Map(Amplifier.OpenCL.Cloo.ComputeImage,System.Boolean,Amplifier.OpenCL.Cloo.ComputeMemoryMappingFlags,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})"/>. This pointer is <c>IntPtr.Zero</c> after this method returns. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Wait(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a wait command for a collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/>s to complete before any future commands queued in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> are executed.
            </summary>
            <param name="events"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/>s that this command will wait for. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Write``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a buffer.
            </summary>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="source"> The data written to the buffer. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Write``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write a 2D or 3D region of elements to a buffer.
            </summary>
            <typeparam name="T"> The type of the elements of the buffer. </typeparam>
            <param name="destination"> The buffer to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="sourceOffset"> The <paramref name="source"/> element position where reading starts. </param>
            <param name="region"> The region of elements to copy. </param>
            <param name="destinationRowPitch"> The size of the destination buffer row in bytes. If set to zero then <paramref name="destinationRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="destinationSlicePitch"> The size of the destination buffer 2D slice in bytes. If set to zero then <paramref name="destinationSlicePitch"/> equals <c>region.Y * sizeof(T) * destinationRowPitch</c>. </param>
            <param name="sourceRowPitch"> The size of the memory area row in bytes. If set to zero then <paramref name="sourceRowPitch"/> equals <c>region.X * sizeof(T)</c>. </param>
            <param name="sourceSlicePitch"> The size of the memory area 2D slice in bytes. If set to zero then <paramref name="sourceSlicePitch"/> equals <c>region.Y * sizeof(T) * sourceRowPitch</c>. </param>
            <param name="source"> The data written to the buffer. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Write(Amplifier.OpenCL.Cloo.ComputeImage,System.Boolean,Amplifier.OpenCL.Cloo.SysIntX3,Amplifier.OpenCL.Cloo.SysIntX3,System.Int64,System.Int64,System.IntPtr,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to write data to a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <param name="destination"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> to write to. </param>
            <param name="blocking"> The mode of operation of this command. If <c>true</c> this call will not return until the command has finished execution. </param>
            <param name="destinationOffset"> The <paramref name="destination"/> element position where writing starts. </param>
            <param name="region"> The region of elements to write. </param>
            <param name="rowPitch"> The <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.RowPitch"/> of <paramref name="destination"/> or 0. </param>
            <param name="slicePitch"> The <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.SlicePitch"/> of <paramref name="destination"/> or 0. </param>
            <param name="source"> The content written to the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> If <paramref name="blocking"/> is <c>true</c> this method will not return until the command completes. If <paramref name="blocking"/> is <c>false</c> this method will return immediately after the command is enqueued. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.FillBuffer``1(Amplifier.OpenCL.Cloo.ComputeBufferBase{``0},``0[],System.Int64,System.Int64,System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Enqueues a command to fill a buffer with a given pattern.
            </summary>
            <typeparam name="T"> The type of the elements of the buffer. </typeparam>
            <param name="buffer"> The buffer to write to. </param>
            <param name="pattern"> The pattern to write. </param>
            <param name="offset"> The position in <paramref name="buffer"/> where writing starts. Given in multiples of the given pattern length. </param>
            <param name="size"> How often the <paramref name="pattern"/> is written to the buffer. </param>
            <param name="events"> A collection of events that need to complete before this particular command can be executed. If <paramref name="events"/> is not <c>null</c> or read-only a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/> identifying this command is created and attached to the end of the collection. </param>
            <remarks> Requires OpenCL 1.2. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCompiler">
            <summary>
            Represents the OpenCL compiler.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCompiler.Unload">
            <summary>
            Unloads the OpenCL compiler.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeContext">
            <summary>
            Represents an OpenCL context.
            </summary>
            <remarks> The environment within which the kernels execute and the domain in which synchronization and memory management is defined. </remarks>
            <br/>
            <example> 
            This example shows how to create a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> that is able to share data with an OpenGL context in a Microsoft Windows OS:
            <code>
            <![CDATA[
            
            // NOTE: If you see some non C# bits surrounding this code section, ignore them. They're not part of the code.
            
            // We will need the device context, which is obtained through an OS specific function.
            [DllImport("opengl32.dll")]
            extern static IntPtr wglGetCurrentDC();
            
            // Query the device context.
            IntPtr deviceContextHandle = wglGetCurrentDC();
            
            // Select a platform which is capable of OpenCL/OpenGL interop.
            ComputePlatform platform = ComputePlatform.GetByName(name);
            
            // Create the context property list and populate it.
            ComputeContextProperty p1 = new ComputeContextProperty(ComputeContextPropertyName.Platform, platform.Handle.Value);
            ComputeContextProperty p2 = new ComputeContextProperty(ComputeContextPropertyName.CL_GL_CONTEXT_KHR, openGLContextHandle);
            ComputeContextProperty p3 = new ComputeContextProperty(ComputeContextPropertyName.CL_WGL_HDC_KHR, deviceContextHandle);
            ComputeContextPropertyList cpl = new ComputeContextPropertyList(new ComputeContextProperty[] { p1, p2, p3 });
            
            // Create the context. Usually, you'll want this on a GPU but other options might be available as well.
            ComputeContext context = new ComputeContext(ComputeDeviceTypes.Gpu, cpl, null, IntPtr.Zero);
            
            // Create a shared OpenCL/OpenGL buffer.
            // The generic type should match the type of data that the buffer contains.
            // glBufferId is an existing OpenGL buffer identifier.
            ComputeBuffer<float> clglBuffer = ComputeBuffer.CreateFromGLBuffer<float>(context, ComputeMemoryFlags.ReadWrite, glBufferId);
            
            ]]>
            </code>
            Before working with the <c>clglBuffer</c> you should make sure of two things:<br/>
            1) OpenGL isn't using <c>glBufferId</c>. You can achieve this by calling <c>glFinish</c>.<br/>
            2) Make it available to OpenCL through the <see cref="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.AcquireGLObjects(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeMemory},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})"/> method.<br/>
            When finished, you should wait until <c>clglBuffer</c> isn't used any longer by OpenCL. After that, call <see cref="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.ReleaseGLObjects(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeMemory},System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})"/> to make the buffer available to OpenGL again.
            </example>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContext.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices">
            <summary>
            Gets a read-only collection of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <value> A read-only collection of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContext.Platform">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContext.Properties">
            <summary>
            Gets a collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>s of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <value> A collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>s of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContext.#ctor(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},Amplifier.OpenCL.Cloo.ComputeContextPropertyList,Amplifier.OpenCL.Cloo.Bindings.ComputeContextNotifier,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> on a collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s.
            </summary>
            <param name="devices"> A collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s to associate with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="properties"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="notify"> A delegate instance that refers to a notification routine. This routine is a callback function that will be used by the OpenCL implementation to report information on errors that occur in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. The callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe and that the delegate instance doesn't get collected by the Garbage Collector until <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> is disposed. If <paramref name="notify"/> is <c>null</c>, no callback function is registered. </param>
            <param name="notifyDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContext.#ctor(Amplifier.OpenCL.Cloo.ComputeDeviceTypes,Amplifier.OpenCL.Cloo.ComputeContextPropertyList,Amplifier.OpenCL.Cloo.Bindings.ComputeContextNotifier,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> on all the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s that match the specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceTypes"/>.
            </summary>
            <param name="deviceType"> A bit-field that identifies the type of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> to associate with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="properties"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="notify"> A delegate instance that refers to a notification routine. This routine is a callback function that will be used by the OpenCL implementation to report information on errors that occur in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. The callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe and that the delegate instance doesn't get collected by the Garbage Collector until <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> is disposed. If <paramref name="notify"/> is <c>null</c>, no callback function is registered. </param>
            <param name="userDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContext.#ctor(System.IntPtr)">
            <summary>
            Creates a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> from an external handle>.
            </summary>
            <param name="externalHandle"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContext.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeContextProperty">
            <summary>
            Represents an OpenCL context property.
            </summary>
            <remarks> An OpenCL context property is a (name, value) data pair. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContextProperty.Name">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyName"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyName"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContextProperty.Value">
            <summary>
            Gets the value of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>.
            </summary>
            <value> The value of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextProperty.#ctor(Amplifier.OpenCL.Cloo.ComputeContextPropertyName,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>.
            </summary>
            <param name="name"> The name of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </param>
            <param name="value"> The value of the created <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextProperty.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>.
            </summary>
            <returns> The string representation of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList">
            <summary>
            Represents a list of <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>s.
            </summary>
            <remarks> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/> is used to specify the properties of a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.#ctor(Amplifier.OpenCL.Cloo.ComputePlatform)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/> which contains a single item specifying a <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <param name="platform"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.#ctor(System.Collections.Generic.IEnumerable{Amplifier.OpenCL.Cloo.ComputeContextProperty})">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/> which contains the specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>s.
            </summary>
            <param name="properties"> An enumerable of <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>'s. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.GetByName(Amplifier.OpenCL.Cloo.ComputeContextPropertyName)">
            <summary>
            Gets a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/> of a specified <c>ComputeContextPropertyName</c>.
            </summary>
            <param name="name"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyName"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/>. </param>
            <returns> The requested <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/> or <c>null</c> if no such <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextProperty"/> exists in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContextPropertyList"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.Add(Amplifier.OpenCL.Cloo.ComputeContextProperty)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.Contains(Amplifier.OpenCL.Cloo.ComputeContextProperty)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.CopyTo(Amplifier.OpenCL.Cloo.ComputeContextProperty[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.Remove(Amplifier.OpenCL.Cloo.ComputeContextProperty)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeContextPropertyList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeDevice">
            <summary>
            Represents an OpenCL device.
            </summary>
            <value> A device is a collection of compute units. A command queue is used to queue commands to a device. Examples of commands include executing kernels, or reading and writing memory objects. OpenCL devices typically correspond to a GPU, a multi-core CPU, and other processors such as DSPs and the Cell/B.E. processor. </value>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.AddressBits">
            <summary>
            Gets the default <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> address space size in bits.
            </summary>
            <value> Currently supported values are 32 or 64 bits. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Available">
            <summary>
            Gets the availability state of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> Is <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> is available and <c>false</c> otherwise. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.CommandQueueFlags">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags"/> supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueueFlags"/> supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.CompilerAvailable">
            <summary>
            Gets the availability state of the OpenCL compiler of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.Platform"/>.
            </summary>
            <value> Is <c>true</c> if the implementation has a compiler available to compile the program source and <c>false</c> otherwise. This can be <c>false</c> for the embededed platform profile only. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.DriverVersion">
            <summary>
            Gets the OpenCL software driver version string of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The version string in the form <c>major_number.minor_number</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.EndianLittle">
            <summary>
            Gets the endianness of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> Is <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> is a little endian device and <c>false</c> otherwise. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.ErrorCorrectionSupport">
            <summary>
            Gets the error correction support state of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> Is <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> implements error correction for the memories, caches, registers etc. Is <c>false</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> does not implement error correction. This can be a requirement for certain clients of OpenCL. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.ExecutionCapabilities">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceExecutionCapabilities"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceExecutionCapabilities"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Extensions">
            <summary>
            Gets a read-only collection of names of extensions that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports.
            </summary>
            <value> A read-only collection of names of extensions that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.GlobalMemoryCacheLineSize">
            <summary>
            Gets the size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory cache line in bytes.
            </summary>
            <value> The size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory cache line in bytes. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.GlobalMemoryCacheSize">
            <summary>
            Gets the size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory cache in bytes.
            </summary>
            <value> The size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory cache in bytes. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.GlobalMemoryCacheType">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceMemoryCacheType"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.GlobalMemorySize">
            <summary>
            Gets the size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory in bytes.
            </summary>
            <value> The size of the global <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory in bytes. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Image2DMaxHeight">
            <summary>
            Gets the maximum <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Height"/> value for <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports in pixels.
            </summary>
            <value> The minimum value is 8192 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Image2DMaxWidth">
            <summary>
            Gets the maximum <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Width"/> value for <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports in pixels.
            </summary>
            <value> The minimum value is 8192 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Image3DMaxDepth">
            <summary>
            Gets the maximum <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Depth"/> value for <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports in pixels.
            </summary>
            <value> The minimum value is 2048 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Image3DMaxHeight">
            <summary>
            Gets the maximum <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Height"/> value for <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports in pixels.
            </summary>
            <value> The minimum value is 2048 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Image3DMaxWidth">
            <summary>
            Gets the maximum <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Width"/> value for <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports in pixels.
            </summary>
            <value> The minimum value is 2048 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport">
            <summary>
            Gets the state of image support of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> Is <c>true</c> if <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>s are supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> and <c>false</c> otherwise. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.LocalMemorySize">
            <summary>
            Gets the size of local memory are of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> in bytes.
            </summary>
            <value> The minimum value is 16 KB (OpenCL 1.0) or 32 KB (OpenCL 1.1). </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.LocalMemoryType">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceLocalMemoryType"/> that is supported on the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceLocalMemoryType"/> that is supported on the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxClockFrequency">
            <summary>
            Gets the maximum configured clock frequency of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> in MHz.
            </summary>
            <value> The maximum configured clock frequency of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> in MHz. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxComputeUnits">
            <summary>
            Gets the number of parallel compute cores on the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The minimum value is 1. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxConstantArguments">
            <summary>
            Gets the maximum number of arguments declared with the <c>__constant</c> or <c>constant</c> qualifier in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> executing in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The minimum value is 8. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxConstantBufferSize">
            <summary>
            Gets the maximum size in bytes of a constant buffer allocation in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory.
            </summary>
            <value> The minimum value is 64 KB. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxMemoryAllocationSize">
            <summary>
            Gets the maximum size of memory object allocation in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory in bytes.
            </summary>
            <value> The minimum value is <c>max(<see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.GlobalMemorySize"/>/4, 128*1024*1024)</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxParameterSize">
            <summary>
            Gets the maximum size in bytes of the arguments that can be passed to a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> executing in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The minimum value is 256 (OpenCL 1.0) or 1024 (OpenCL 1.1). </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxReadImageArguments">
            <summary>
            Gets the maximum number of simultaneous <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>s that can be read by a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> executing in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The minimum value is 128 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxSamplers">
            <summary>
            Gets the maximum number of <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>s that can be used in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <value> The minimum value is 16 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxWorkGroupSize">
            <summary>
            Gets the maximum number of work-items in a work-group executing a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> using the data parallel execution model.
            </summary>
            <value> The minimum value is 1. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxWorkItemDimensions">
            <summary>
            Gets the maximum number of dimensions that specify the global and local work-item IDs used by the data parallel execution model.
            </summary>
            <value> The minimum value is 3. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxWorkItemSizes">
            <summary>
            Gets the maximum number of work-items that can be specified in each dimension of the globalWorkSize argument of <see cref="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Execute(Amplifier.OpenCL.Cloo.ComputeKernel,System.Int64[],System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})"/>.
            </summary>
            <value> The maximum number of work-items that can be specified in each dimension of the globalWorkSize argument of <see cref="M:Amplifier.OpenCL.Cloo.ComputeCommandQueue.Execute(Amplifier.OpenCL.Cloo.ComputeKernel,System.Int64[],System.Int64[],System.Int64[],System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MaxWriteImageArguments">
            <summary>
            Gets the maximum number of simultaneous <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>s that can be written to by a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> executing in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The minimum value is 8 if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.ImageSupport"/> is <c>true</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MemoryBaseAddressAlignment">
            <summary>
            Gets the alignment in bits of the base address of any <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> allocated in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory.
            </summary>
            <value> The alignment in bits of the base address of any <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> allocated in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.MinDataTypeAlignmentSize">
            <summary>
            Gets the smallest alignment in bytes which can be used for any data type allocated in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory.
            </summary>
            <value> The smallest alignment in bytes which can be used for any data type allocated in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> memory. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Name">
            <summary>
            Gets the name of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The name of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Platform">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthChar">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>char</c>s.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>char</c>s. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthDouble">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>double</c>s or 0 if the <c>cl_khr_fp64</c> format is not supported.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>double</c>s or 0 if the <c>cl_khr_fp64</c> format is not supported. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthFloat">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>float</c>s.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>float</c>s. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthHalf">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>half</c>s or 0 if the <c>cl_khr_fp16</c> format is not supported.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>half</c>s or 0 if the <c>cl_khr_fp16</c> format is not supported. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthInt">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>int</c>s.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>int</c>s. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthLong">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>long</c>s.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>long</c>s. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.PreferredVectorWidthShort">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>short</c>s.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>'s preferred native vector width size for vector of <c>short</c>s. </value>
            <remarks> The vector width is defined as the number of scalar elements that can be stored in the vector. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Profile">
            <summary>
            Gets the OpenCL profile name supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> 
            The profile name returned can be one of the following strings:
            <list type="bullets">
            <item>
                <term> FULL_PROFILE </term>
                <description> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports the OpenCL specification (functionality defined as part of the core specification and does not require any extensions to be supported). </description>
            </item>
            <item>
                <term> EMBEDDED_PROFILE </term>
                <description> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> supports the OpenCL embedded profile. </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.ProfilingTimerResolution">
            <summary>
            Gets the resolution of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> timer in nanoseconds.
            </summary>
            <value> The resolution of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> timer in nanoseconds. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.SingleCapabilites">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceSingleCapabilities"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Type">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceTypes"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDeviceTypes"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Vendor">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> vendor name string.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> vendor name string. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.VendorId">
            <summary>
            Gets a unique <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> vendor identifier.
            </summary>
            <value> A unique <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> vendor identifier. </value>
            <remarks> An example of a unique device identifier could be the PCIe ID. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.Version">
            <summary>
            Gets the OpenCL version supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The OpenCL version supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.VersionString">
            <summary>
            Gets the OpenCL version string supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The version string has the following format: <c>OpenCL[space][major_version].[minor_version][space][vendor-specific information]</c>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.HostUnifiedMemory">
            <summary>
            Gets information about the presence of the unified memory subsystem.
            </summary>
            <value> Is <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> and the host have a unified memory subsystem and <c>false</c> otherwise. </value>
            <remarks> Requires OpenCL 1.1 </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthChar">
            <summary>
            Gets the native ISA vector width size for vector of <c>char</c>s.
            </summary>
            <value> The native ISA vector width size for vector of <c>char</c>s. </value>
            <remarks> 
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthDouble">
            <summary>
            Gets the native ISA vector width size for vector of <c>double</c>s or 0 if the <c>cl_khr_fp64</c> format is not supported.
            </summary>
            <value> The native ISA vector width size for vector of <c>double</c>s or 0 if the <c>cl_khr_fp64</c> format is not supported. </value>
            <remarks> 
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthFloat">
            <summary>
            Gets the native ISA vector width size for vector of <c>float</c>s.
            </summary>
            <value> The native ISA vector width size for vector of <c>float</c>s. </value>
            <remarks> 
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthHalf">
            <summary>
            Gets the native ISA vector width size for vector of <c>half</c>s or 0 if the <c>cl_khr_fp16</c> format is not supported.
            </summary>
            <value> The native ISA vector width size for vector of <c>half</c>s or 0 if the <c>cl_khr_fp16</c> format is not supported. </value>
            <remarks> 
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthInt">
            <summary>
            Gets the native ISA vector width size for vector of <c>int</c>s.
            </summary>
            <value> The native ISA vector width size for vector of <c>int</c>s. </value>
            <remarks>
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthLong">
            <summary>
            Gets the native ISA vector width size for vector of <c>long</c>s.
            </summary>
            <value> The native ISA vector width size for vector of <c>long</c>s. </value>
            <remarks>
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.NativeVectorWidthShort">
            <summary>
            Gets the native ISA vector width size for vector of <c>short</c>s.
            </summary>
            <value> The native ISA vector width size for vector of <c>short</c>s. </value>
            <remarks> 
                <para> The vector width is defined as the number of scalar elements that can be stored in the vector. </para>
                <para> Requires OpenCL 1.1 </para>
            </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.OpenCLCVersion">
            <summary>
            Gets the OpenCL C version supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> Is <c>1.1</c> if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.Version"/> is <c>1.1</c>. Is <c>1.0</c> or <c>1.1</c> if <see cref="P:Amplifier.OpenCL.Cloo.ComputeDevice.Version"/> is <c>1.0</c>. </value>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeDevice.OpenCLCVersionString">
            <summary>
            Gets the OpenCL C version string supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <value> The OpenCL C version string supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. The version string has the following format: <c>OpenCL[space]C[space][major_version].[minor_version][space][vendor-specific information]</c>. </value>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeEvent">
            <summary>
            Represents an OpenCL event.
            </summary>
            <remarks> An event encapsulates the status of an operation such as a command. It can be used to synchronize operations in a context. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEvent.CommandQueue">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEvent.Clone">
            <summary>
            Clones the event. Because the event is retained the cloned event as well as the clone have to be disposed
            </summary>
            <returns>Cloned event</returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeEventBase">
            <summary>
            Represents the parent type to any Cloo event types.
            </summary>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeEvent"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>
        </member>
        <member name="E:Amplifier.OpenCL.Cloo.ComputeEventBase.Aborted">
            <summary>
            Occurs when the command associated with the event is abnormally terminated.
            </summary>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="E:Amplifier.OpenCL.Cloo.ComputeEventBase.Completed">
            <summary>
            Occurs when <c>ComputeEventBase.Status</c> changes to <c>ComputeCommandExecutionStatus.Complete</c>.
            </summary>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.FinishTime">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command has finished execution.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command has finished execution. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.EnqueueTime">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command is enqueued in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> by the host.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command is enqueued in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/> by the host. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.Status">
            <summary>
            Gets the execution status of the associated command.
            </summary>
            <value> The execution status of the associated command or a negative value if the execution was abnormally terminated. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.StartTime">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command starts execution.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command starts execution. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.SubmitTime">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command that has been enqueued is submitted by the host to the device.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> time counter in nanoseconds when the associated command that has been enqueued is submitted by the host to the device. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventBase.Type">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandType"/> associated with the event.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandType"/> associated with the event. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventBase.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventBase.HookNotifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventBase.OnCompleted(System.Object,Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="evArgs"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventBase.OnAborted(System.Object,Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="evArgs"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventBase.Clone">
            <summary>
            Clones the event. Because the event is retained the cloned event as well as the clone have to be disposed
            </summary>
            <returns>Cloned event</returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs">
            <summary>
            Represents the arguments of a command status change.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs.Event">
            <summary>
            Gets the event associated with the command that had its status changed.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs.Status">
            <summary>
            Gets the execution status of the command represented by the event.
            </summary>
            <remarks> Returns a negative integer if the command was abnormally terminated. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs.#ctor(Amplifier.OpenCL.Cloo.ComputeEventBase,Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus)">
            <summary>
            Creates a new <c>ComputeCommandStatusArgs</c> instance.
            </summary>
            <param name="ev"> The event representing the command that had its status changed. </param>
            <param name="status"> The status of the command. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeCommandStatusArgs.#ctor(Amplifier.OpenCL.Cloo.ComputeEventBase,System.Int32)">
            <summary>
            Creates a new <c>ComputeCommandStatusArgs</c> instance.
            </summary>
            <param name="ev"> The event of the command that had its status changed. </param>
            <param name="status"> The status of the command. </param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeCommandStatusChanged">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeEventList">
            <summary>
            Represents a list of OpenCL generated or user created events.
            </summary>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.#ctor">
            <summary>
            Creates an empty <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventList"/>.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.#ctor(System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventList"/> from an existing list of <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>s.
            </summary>
            <param name="events"> A list of <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>s. </param>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventList.Last">
            <summary>
            Gets the last <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/> on the list.
            </summary>
            <value> The last <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/> on the list. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Wait(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase})">
            <summary>
            Waits on the host thread for the specified events to complete.
            </summary>
            <param name="events"> The events to be waited for completition. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Wait">
            <summary>
            Waits on the host thread for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>s in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventList"/> to complete.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.IndexOf(Amplifier.OpenCL.Cloo.ComputeEventBase)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Insert(System.Int32,Amplifier.OpenCL.Cloo.ComputeEventBase)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Add(Amplifier.OpenCL.Cloo.ComputeEventBase)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Contains(Amplifier.OpenCL.Cloo.ComputeEventBase)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.CopyTo(Amplifier.OpenCL.Cloo.ComputeEventBase[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeEventList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.Remove(Amplifier.OpenCL.Cloo.ComputeEventBase)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeEventList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeException">
            <summary>
            Represents an error state that occurred while executing an OpenCL API call.
            </summary>
            <seealso cref="P:Amplifier.OpenCL.Cloo.ComputeException.ComputeErrorCode"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeException.ComputeErrorCode">
            <summary>
            Gets the <see cref="P:Amplifier.OpenCL.Cloo.ComputeException.ComputeErrorCode"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeException"/>.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeException.#ctor(Amplifier.OpenCL.Cloo.ComputeErrorCode)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeException"/> with a specified <see cref="P:Amplifier.OpenCL.Cloo.ComputeException.ComputeErrorCode"/>.
            </summary>
            <param name="code"> A <see cref="P:Amplifier.OpenCL.Cloo.ComputeException.ComputeErrorCode"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeException.ThrowOnError(System.Int32)">
            <summary>
            Checks for an OpenCL error code and throws a <see cref="T:Amplifier.OpenCL.Cloo.ComputeException"/> if such is encountered.
            </summary>
            <param name="errorCode"> The value to be checked for an OpenCL error. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeException.ThrowOnError(Amplifier.OpenCL.Cloo.ComputeErrorCode)">
            <summary>
            Checks for an OpenCL error code and throws a <see cref="T:Amplifier.OpenCL.Cloo.ComputeException"/> if such is encountered.
            </summary>
            <param name="errorCode"> The OpenCL error code. </param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeExternalEvent">
            <summary>
            Represents an event created by an external library
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeExternalEvent.#ctor(Amplifier.OpenCL.Cloo.Bindings.CLEventHandle,Amplifier.OpenCL.Cloo.ComputeCommandQueue)">
            <summary>
            Creates an see<see cref="T:Amplifier.OpenCL.Cloo.ComputeExternalEvent"/> from an external handle
            </summary>
            <param name="handle"></param>
            <param name="queue"></param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImage">
            <summary>
            Represents an OpenCL image.
            </summary>
            <remarks> A memory object that stores a two- or three- dimensional structured array. Image data can only be accessed with read and write functions. The read functions use a sampler. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.Depth">
            <summary>
            Gets or sets (protected) the depth in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The depth in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.ElementSize">
            <summary>
            Gets or sets (protected) the size of the elements (pixels) of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The size of the elements (pixels) of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.Height">
            <summary>
            Gets or sets (protected) the height in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The height in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.RowPitch">
            <summary>
            Gets or sets (protected) the size in bytes of a row of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The size in bytes of a row of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.SlicePitch">
            <summary>
            Gets or sets (protected) the size in bytes of a 2D slice of a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>.
            </summary>
            <value> The size in bytes of a 2D slice of a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. For a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> this value is 0. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImage.Width">
            <summary>
            Gets or sets (protected) the width in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The width in pixels of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage.GetSupportedFormats(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeMemoryType)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="flags"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImage2D">
            <summary>
            Represents an OpenCL 2D image.
            </summary>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage2D.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat,System.Int32,System.Int32,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>.
            </summary>
            <param name="context"> A valid <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> in which the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> is created. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. </param>
            <param name="format"> A structure that describes the format properties of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. </param>
            <param name="width"> The width of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> in pixels. </param>
            <param name="height"> The height of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> in pixels. </param>
            <param name="rowPitch"> The size in bytes of each row of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. If <paramref name="rowPitch"/> is zero, OpenCL will compute the proper value based on <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Width"/> and <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.ElementSize"/>. </param>
            <param name="data"> The data to initialize the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. Can be <c>IntPtr.Zero</c>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage2D.CreateFromGLRenderbuffer(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> from an OpenGL renderbuffer object.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="renderbufferId"> The OpenGL renderbuffer object id to use. </param>
            <returns> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage2D.CreateFromGLTexture2D(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> from an OpenGL 2D texture object.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="textureTarget"> One of the following values: GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_RECTANGLE. Using GL_TEXTURE_RECTANGLE for texture_target requires OpenGL 3.1. Alternatively, GL_TEXTURE_RECTANGLE_ARB may be specified if the OpenGL extension GL_ARB_texture_rectangle is supported. </param>
            <param name="mipLevel"> The mipmap level of the OpenGL 2D texture object to be used. </param>
            <param name="textureId"> The OpenGL 2D texture object id to use. </param>
            <returns> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage2D.GetSupportedFormats(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags)">
            <summary>
            Gets a collection of supported <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/> <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <param name="context"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> for which the collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s is queried. </param>
            <param name="flags"> The <c>ComputeMemoryFlags</c> for which the collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s is queried. </param>
            <returns> The collection of the required <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s. </returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImage3D">
            <summary>
            Represents an OpenCL 3D image.
            </summary>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage3D.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,Amplifier.OpenCL.Cloo.ComputeImageFormat,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>.
            </summary>
            <param name="context"> A valid <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> in which the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> is created. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. </param>
            <param name="format"> A structure that describes the format properties of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. </param>
            <param name="width"> The width of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> in pixels. </param>
            <param name="height"> The height of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> in pixels. </param>
            <param name="depth"> The depth of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> in pixels. </param>
            <param name="rowPitch"> The size in bytes of each row of elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. If <paramref name="rowPitch"/> is zero, OpenCL will compute the proper value based on <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Width"/> and <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.ElementSize"/>. </param>
            <param name="slicePitch"> The size in bytes of each 2D slice in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. If <paramref name="slicePitch"/> is zero, OpenCL will compute the proper value based on <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.RowPitch"/> and <see cref="P:Amplifier.OpenCL.Cloo.ComputeImage.Height"/>. </param>
            <param name="data"> The data to initialize the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. Can be <c>IntPtr.Zero</c>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage3D.CreateFromGLTexture3D(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> from an OpenGL 3D texture object.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> with enabled CL/GL sharing. </param>
            <param name="flags"> A bit-field that is used to specify usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/>. Only <c>ComputeMemoryFlags.ReadOnly</c>, <c>ComputeMemoryFlags.WriteOnly</c> and <c>ComputeMemoryFlags.ReadWrite</c> are allowed. </param>
            <param name="textureTarget"> The image type of texture. Must be GL_TEXTURE_3D. </param>
            <param name="mipLevel"> The mipmap level of the OpenGL 2D texture object to be used. </param>
            <param name="textureId"> The OpenGL 2D texture object id to use. </param>
            <returns> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage2D"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImage3D.GetSupportedFormats(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags)">
            <summary>
            Gets a collection of supported <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage3D"/> <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>.
            </summary>
            <param name="context"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> for which the collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s is queried. </param>
            <param name="flags"> The <c>ComputeMemoryFlags</c> for which the collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s is queried. </param>
            <returns> The collection of the required <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>s. </returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeImageFormat">
            <summary>
            Represents an OpenCL image format.
            </summary>
            <remarks> This structure defines the type, count and size of the image channels. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImageFormat.ChannelOrder">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageChannelOrder"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeImageFormat.ChannelType">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageChannelType"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageChannelType"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeImageFormat.#ctor(Amplifier.OpenCL.Cloo.ComputeImageChannelOrder,Amplifier.OpenCL.Cloo.ComputeImageChannelType)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFormat"/>.
            </summary>
            <param name="channelOrder"> The number of channels and the channel layout i.e. the memory layout in which channels are stored in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>. </param>
            <param name="channelType"> The type of the channel data. The number of bits per element determined by the <paramref name="channelType"/> and <paramref name="channelOrder"/> must be a power of two. </param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeKernel">
            <summary>
            Represents an OpenCL kernel.
            </summary>
            <remarks> A kernel object encapsulates a specific kernel function declared in a program and the argument values to be used when executing this kernel function. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeKernel.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeKernel.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeKernel.FunctionName">
            <summary>
            Gets the function name of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <value> The function name of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> belongs to.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> that the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> belongs to. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.GetLocalMemorySize(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the amount of local memory in bytes used by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="device"> One of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program"/>. </param>
            <returns> The amount of local memory in bytes used by the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.GetCompileWorkGroupSize(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the compile work-group size specified by the <c>__attribute__((reqd_work_group_size(X, Y, Z)))</c> qualifier.
            </summary>
            <param name="device"> One of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program"/>. </param>
            <returns> The compile work-group size specified by the <c>__attribute__((reqd_work_group_size(X, Y, Z)))</c> qualifier. If no such qualifier is specified, (0, 0, 0) is returned. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.GetPreferredWorkGroupSizeMultiple(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the preferred multiple of workgroup size for launch. 
            </summary>
            <param name="device"> One of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program"/>. </param>
            <returns> The preferred multiple of workgroup size for launch. </returns>
            <remarks> The returned value is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to ComputeCommandQueue.Execute will not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. </remarks>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.GetPrivateMemorySize(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the minimum amount of memory, in bytes, used by each work-item in the kernel.
            </summary>
            <param name="device"> One of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program"/>. </param>
            <returns> The minimum amount of memory, in bytes, used by each work-item in the kernel. </returns>
            <remarks> The returned value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the <c>__private</c> or <c>private</c> qualifier. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.GetWorkGroupSize(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the maximum work-group size that can be used to execute the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> on a <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <param name="device"> One of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeKernel.Program"/>. </param>
            <returns> The maximum work-group size that can be used to execute the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> on <paramref name="device"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetArgument(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sets an argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> (no argument tracking).
            </summary>
            <param name="index"> The argument index. </param>
            <param name="dataSize"> The size of the argument data in bytes. </param>
            <param name="dataAddr"> A pointer to the data that should be used as the argument value. </param>
            <remarks> 
            Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel.
            <br/>
            Note that this method does not provide argument tracking. It is up to the user to reference the kernel arguments (i.e. prevent them from being garbage collected) until the kernel has finished execution.
            </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetLocalArgument(System.Int32,System.Int64)">
            <summary>
            Sets the size in bytes of an argument specfied with the <c>local</c> or <c>__local</c> address space qualifier.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="dataSize"> The size of the argument data in bytes. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetMemoryArgument(System.Int32,Amplifier.OpenCL.Cloo.ComputeMemory)">
            <summary>
            Sets a <c>T*</c>, <c>image2d_t</c> or <c>image3d_t</c> argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="memObj"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/> that is passed as the argument. </param>
            <remarks> This method will automatically track <paramref name="memObj"/> to prevent it from being collected by the GC.<br/> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetSamplerArgument(System.Int32,Amplifier.OpenCL.Cloo.ComputeSampler)">
            <summary>
            Sets a <c>sampler_t</c> argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="sampler"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/> that is passed as the argument. </param>
            <remarks> This method will automatically track <paramref name="sampler"/> to prevent it from being collected by the GC.<br/> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument``1(System.Int32,``0)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <typeparam name="T"> The type of the argument. </typeparam>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Byte)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.UInt16)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Int16)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.UInt32)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Int32)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.UInt64)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Int64)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Single)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.SetValueArgument(System.Int32,System.Double)">
            <summary>
            Sets a value argument of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>.
            </summary>
            <param name="index"> The argument index. </param>
            <param name="data"> The data that is passed as the argument value. </param>
            <remarks> Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n-1, where n is the total number of arguments declared by the kernel. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeKernel.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeMemory">
            <summary>
            Represents an OpenCL memory object.
            </summary>
            <remarks> A memory object is a handle to a region of global memory. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeMemory.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeMemory.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeMemory.Flags">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemoryFlags"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemoryFlags"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeMemory.Size">
            <summary>
            Gets or sets (protected) the size in bytes of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>.
            </summary>
            <value> The size in bytes of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeMemory.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,Amplifier.OpenCL.Cloo.ComputeMemoryFlags)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeMemory.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeObject">
            <summary>
            Represents an OpenCL object.
            </summary>
            <remarks> An OpenCL object is an object that is identified by its handle in the OpenCL environment. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.Equals(System.Object,System.Object)">
            <summary>
            Checks if two <c>object</c>s are equal. These <c>object</c>s must be cast from <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>s.
            </summary>
            <param name="objA"> The first <c>object</c> to compare. </param>
            <param name="objB"> The second <c>object</c> to compare. </param>
            <returns> <c>true</c> if the <c>object</c>s are equal otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> is equal to a specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> cast to an <c>object</c>.
            </summary>
            <param name="obj"> The specified <c>object</c> to compare the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> with. </param>
            <returns> <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> is equal with <paramref name="obj"/> otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.Equals(Amplifier.OpenCL.Cloo.ComputeObject)">
            <summary>
            Checks if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> is equal to a specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>.
            </summary>
            <param name="obj"> The specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> to compare the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> with. </param>
            <returns> <c>true</c> if the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/> is equal with <paramref name="obj"/> otherwise <c>false</c>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetHashCode">
            <summary>
            Gets the hash code of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>.
            </summary>
            <returns> The hash code of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>.
            </summary>
            <returns> The string representation of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetArrayInfo``3(``0,``1,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegate{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="THandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <typeparam name="TQueriedType"></typeparam>
            <param name="handle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetArrayInfo``4(``0,``1,``2,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegateEx{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TMainHandleType"></typeparam>
            <typeparam name="TSecondHandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <typeparam name="TQueriedType"></typeparam>
            <param name="mainHandle"></param>
            <param name="secondHandle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetBoolInfo``2(``0,``1,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegate{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="THandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <param name="handle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetInfo``3(``0,``1,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegate{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="THandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <typeparam name="TQueriedType"></typeparam>
            <param name="handle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetInfo``4(``0,``1,``2,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegateEx{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TMainHandleType"></typeparam>
            <typeparam name="TSecondHandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <typeparam name="TQueriedType"></typeparam>
            <param name="mainHandle"></param>
            <param name="secondHandle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetStringInfo``2(``0,``1,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegate{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="THandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <param name="handle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.GetStringInfo``3(``0,``1,``2,Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegateEx{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TMainHandleType"></typeparam>
            <typeparam name="TSecondHandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <param name="mainHandle"></param>
            <param name="secondHandle"></param>
            <param name="paramName"></param>
            <param name="getInfoDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeObject.SetID(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegate`2">
            <summary>
            
            </summary>
            <typeparam name="THandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <param name="objectHandle"></param>
            <param name="paramName"></param>
            <param name="paramValueSize"></param>
            <param name="paramValue"></param>
            <param name="paramValueSizeRet"></param>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeObject.GetInfoDelegateEx`3">
            <summary>
            
            </summary>
            <typeparam name="TMainHandleType"></typeparam>
            <typeparam name="TSecondHandleType"></typeparam>
            <typeparam name="TInfoType"></typeparam>
            <param name="mainObjectHandle"></param>
            <param name="secondaryObjectHandle"></param>
            <param name="paramName"></param>
            <param name="paramValueSize"></param>
            <param name="paramValue"></param>
            <param name="paramValueSizeRet"></param>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputePlatform">
            <summary>
            Represents an OpenCL platform.
            </summary>
            <remarks> The host plus a collection of devices managed by the OpenCL framework that allow an application to share resources and execute kernels on devices in the platform. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeResource"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Devices">
            <summary>
            Gets a read-only collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s available on the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <value> A read-only collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s available on the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Extensions">
            <summary>
            Gets a read-only collection of extension names supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <value> A read-only collection of extension names supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Name">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> name.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> name. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Platforms">
            <summary>
            Gets a read-only collection of available <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>s.
            </summary>
            <value> A read-only collection of available <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>s. </value>
            <remarks> The collection will contain no items, if no OpenCL platforms are found on the system. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Profile">
            <summary>
            Gets the name of the profile supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <value> The name of the profile supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Vendor">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> vendor.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> vendor. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputePlatform.Version">
            <summary>
            Gets the OpenCL version string supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <value> The OpenCL version string supported by the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. It has the following format: <c>OpenCL[space][major_version].[minor_version][space][vendor-specific information]</c>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputePlatform.GetByHandle(System.IntPtr)">
            <summary>
            Gets a <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of a specified handle.
            </summary>
            <param name="handle"> The handle of the queried <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </param>
            <returns> The <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of the matching handle or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputePlatform.GetByName(System.String)">
            <summary>
            Gets the first matching <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of a specified name.
            </summary>
            <param name="platformName"> The name of the queried <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </param>
            <returns> The first <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of the specified name or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputePlatform.GetByVendor(System.String)">
            <summary>
            Gets the first matching <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of a specified vendor.
            </summary>
            <param name="platformVendor"> The vendor of the queried <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </param>
            <returns> The first <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/> of the specified vendor or <c>null</c> if none matches. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputePlatform.QueryDevices">
            <summary>
            Gets a read-only collection of available <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s on the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>.
            </summary>
            <returns> A read-only collection of the available <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s on the <see cref="T:Amplifier.OpenCL.Cloo.ComputePlatform"/>. </returns>
            <remarks> This method resets the <c>ComputePlatform.Devices</c>. This is useful if one or more of them become unavailable (<c>ComputeDevice.Available</c> is <c>false</c>) after a <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> and <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>s that use the <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> have been created and commands have been queued to them. Further calls will trigger an <c>OutOfResourcesComputeException</c> until this method is executed. You will also need to recreate any <see cref="T:Amplifier.OpenCL.Cloo.ComputeResource"/> that was created on the no longer available <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeProgram">
            <summary>
            Represents an OpenCL program.
            </summary>
            <remarks> An OpenCL program consists of a set of kernels. Programs may also contain auxiliary functions called by the kernel functions and constant data. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.Binaries">
            <summary>
            Gets a read-only collection of program binaries associated with the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>.
            </summary>
            <value> A read-only collection of program binaries associated with the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>. </value>
            <remarks> The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.BuildOptions">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> build options as specified in options argument of <see cref="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> build options as specified in options argument of <see cref="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices">
            <summary>
            Gets a read-only collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>.
            </summary>
            <value> A read-only collection of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s associated with the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. </value>
            <remarks> This collection is a subset of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Context"/> <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/>. </remarks>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeProgram.Source">
            <summary>
            Gets a read-only collection of program source code strings specified when creating the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> or <c>null</c> if <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> was created using program binaries.
            </summary>
            <value> A read-only collection of program source code strings specified when creating the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> or <c>null</c> if <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> was created using program binaries. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,System.String)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> from a source code string.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="source"> The source code for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. </param>
            <remarks> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> is associated with the <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/>. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,System.String[])">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> from an array of source code strings.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="source"> The source code lines for the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. </param>
            <remarks> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> is associated with the <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/>. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,System.Collections.Generic.IList{System.Byte[]},System.Collections.Generic.IList{Amplifier.OpenCL.Cloo.ComputeDevice})">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> from a specified list of binaries.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="binaries"> A list of binaries, one for each item in <paramref name="devices"/>. </param>
            <param name="devices"> A subset of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/>. If <paramref name="devices"/> is <c>null</c>, OpenCL will associate every binary from <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Binaries"/> with a corresponding <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> from <see cref="P:Amplifier.OpenCL.Cloo.ComputeContext.Devices"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)">
            <summary>
            Builds (compiles and links) a program executable from the program source or binary for all or some of the <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>.
            </summary>
            <param name="devices"> A subset or all of <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>. If <paramref name="devices"/> is <c>null</c>, the executable is built for every item of <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> for which a source or a binary has been loaded. </param>
            <param name="options"> A set of options for the OpenCL compiler. </param>
            <param name="notify"> A delegate instance that represents a reference to a notification routine. This routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully). If <paramref name="notify"/> is not <c>null</c>, <see cref="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)"/> does not need to wait for the build to complete and can return immediately. If <paramref name="notify"/> is <c>null</c>, <see cref="M:Amplifier.OpenCL.Cloo.ComputeProgram.Build(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.String,Amplifier.OpenCL.Cloo.Bindings.ComputeProgramBuildNotifier,System.IntPtr)"/> does not return until the build has completed. The callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe and that the delegate instance doesn't get collected by the Garbage Collector until the build operation triggers the callback. </param>
            <param name="notifyDataPtr"> Optional user data that will be passed to <paramref name="notify"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.CreateAllKernels">
            <summary>
            Creates a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> for every <c>kernel</c> function in <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>.
            </summary>
            <returns> The collection of created <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>s. </returns>
            <remarks> <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>s are not created for any <c>kernel</c> functions in <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> that do not have the same function definition across all <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/> for which a program executable has been successfully built. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.CreateKernel(System.String)">
            <summary>
            Creates a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> for a kernel function of a specified name.
            </summary>
            <returns> The created <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.GetBuildLog(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the build log of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> for a specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <param name="device"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> building the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. Must be one of <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>. </param>
            <returns> The build log of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> for <paramref name="device"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.GetBuildStatus(Amplifier.OpenCL.Cloo.ComputeDevice)">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> for a specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>.
            </summary>
            <param name="device"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/> building the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/>. Must be one of <see cref="P:Amplifier.OpenCL.Cloo.ComputeProgram.Devices"/>. </param>
            <returns> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgramBuildStatus"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeProgram"/> for <paramref name="device"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeProgram.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeResource">
            <summary>
            Represents an OpenCL resource.
            </summary>
            <remarks> An OpenCL resource is an OpenCL object that can be created and deleted by the application. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeObject"/>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeResource.Dispose">
            <summary>
            Deletes the <see cref="T:Amplifier.OpenCL.Cloo.ComputeResource"/> and frees its accompanying OpenCL resources.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeResource.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeResource.Finalize">
            <summary>
            Releases the associated OpenCL object.
            </summary>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeSampler">
            <summary>
            Represents an OpenCL sampler.
            </summary>
            <remarks> An object that describes how to sample an image when the image is read in the kernel. The image read functions take a sampler as an argument. The sampler specifies the image addressing-mode i.e. how out-of-range image coordinates are handled, the filtering mode, and whether the input image coordinate is a normalized or unnormalized value. </remarks>
            <seealso cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeSampler.Handle">
            <summary>
            The handle of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeSampler.Context">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeSampler.Addressing">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageAddressing"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageAddressing"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeSampler.Filtering">
            <summary>
            Gets the <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFiltering"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
            <value> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFiltering"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. </value>
        </member>
        <member name="P:Amplifier.OpenCL.Cloo.ComputeSampler.NormalizedCoords">
            <summary>
            Gets the state of usage of normalized x, y and z coordinates when accessing a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> through the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
            <value> The state of usage of normalized x, y and z coordinates when accessing a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/> through the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. </value>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeSampler.#ctor(Amplifier.OpenCL.Cloo.ComputeContext,System.Boolean,Amplifier.OpenCL.Cloo.ComputeImageAddressing,Amplifier.OpenCL.Cloo.ComputeImageFiltering)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>.
            </summary>
            <param name="context"> A <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/>. </param>
            <param name="normalizedCoords"> The usage state of normalized coordinates when accessing a <see cref="T:Amplifier.OpenCL.Cloo.ComputeImage"/> in a <see cref="T:Amplifier.OpenCL.Cloo.ComputeKernel"/>. </param>
            <param name="addressing"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageAddressing"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. Specifies how out-of-range image coordinates are handled while reading. </param>
            <param name="filtering"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeImageFiltering"/> mode of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSampler"/>. Specifies the type of filter that must be applied when reading data from an image. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeSampler.Dispose(System.Boolean)">
            <summary>
            Releases the associated OpenCL object.
            </summary>
            <param name="manual"> Specifies the operation mode of this method. </param>
            <remarks> <paramref name="manual"/> must be <c>true</c> if this method is invoked directly by the application. </remarks>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1">
            <summary>
            Represents an OpenCL sub-buffer.
            </summary>
            <typeparam name="T"> The type of the elements of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1"/>. <typeparamref name="T"/> is restricted to value types and <c>struct</c>s containing such types. </typeparam>
            <remarks> A sub-buffer is created from a standard buffer and represents all or part of its data content. <br/> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1.#ctor(Amplifier.OpenCL.Cloo.ComputeBuffer{`0},Amplifier.OpenCL.Cloo.ComputeMemoryFlags,System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1"/> from a specified <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>.
            </summary>
            <param name="buffer"> The buffer to create the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1"/> from. </param>
            <param name="flags"> A bit-field that is used to specify allocation and usage information about the <see cref="T:Amplifier.OpenCL.Cloo.ComputeBuffer`1"/>. </param>
            <param name="offset"> The index of the element of <paramref name="buffer"/>, where the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1"/> starts. </param>
            <param name="count"> The number of elements of <paramref name="buffer"/> to include in the <see cref="T:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeSubBuffer`1.Clone">
            <summary>
            Clones the ComputeBuffer. Because the buffer is retained the cloned buffer as well as the clone have to be disposed
            </summary>
            <returns>Cloned buffer</returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeTools">
            <summary>
            Contains various helper methods.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ParseVersionString(System.String,System.Int32)">
            <summary>
            Parses an OpenCL version string.
            </summary>
            <param name="versionString"> The version string to parse. Must be in the format: <c>Additional substrings[space][major_version].[minor_version][space]Additional substrings</c>. </param>
            <param name="substringIndex"> The index of the substring that specifies the OpenCL version. </param>
            <returns> A <c>Version</c> instance containing the major and minor version from <paramref name="versionString"/>. </returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ExtractHandles(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeDevice},System.Int32@)">
            <summary>
            Extract device handles of <see cref="T:Amplifier.OpenCL.Cloo.ComputeDevice"/>s
            </summary>
            <param name="computeObjects"></param>
            <param name="handleCount"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ExtractHandles(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase},System.Int32@)">
            <summary>
            Extract device handles of <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>s
            </summary>
            <param name="computeObjects"></param>
            <param name="handleCount"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ExtractHandleValues(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeEventBase},System.Int32@)">
            <summary>
            Extract device handle values of <see cref="T:Amplifier.OpenCL.Cloo.ComputeEventBase"/>s
            </summary>
            <param name="computeObjects"></param>
            <param name="handleCount"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ExtractHandles(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeCommandQueue},System.Int32@)">
            <summary>
            Extract device handles of <see cref="T:Amplifier.OpenCL.Cloo.ComputeCommandQueue"/>s
            </summary>
            <param name="computeObjects"></param>
            <param name="handleCount"></param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeTools.ExtractHandles(System.Collections.Generic.ICollection{Amplifier.OpenCL.Cloo.ComputeMemory},System.Int32@)">
            <summary>
            Extract device handles of <see cref="T:Amplifier.OpenCL.Cloo.ComputeMemory"/>s
            </summary>
            <param name="computeObjects"></param>
            <param name="handleCount"></param>
            <returns></returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.ComputeUserEvent">
            <summary>
            Represents an user created event.
            </summary>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeUserEvent.#ctor(Amplifier.OpenCL.Cloo.ComputeContext)">
            <summary>
            Creates a new <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>.
            </summary>
            <param name="context"> The <see cref="T:Amplifier.OpenCL.Cloo.ComputeContext"/> in which the <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/> is created. </param>
            <remarks> Requires OpenCL 1.1. </remarks>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeUserEvent.SetStatus(Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus)">
            <summary>
            Sets the new status of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>.
            </summary>
            <param name="status"> The new status of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>. Allowed value is <see cref="F:Amplifier.OpenCL.Cloo.ComputeCommandExecutionStatus.Complete"/>. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeUserEvent.SetStatus(System.Int32)">
            <summary>
            Sets the new status of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/> to an error value.
            </summary>
            <param name="status"> The error status of the <see cref="T:Amplifier.OpenCL.Cloo.ComputeUserEvent"/>. This should be a negative value. </param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.ComputeUserEvent.Clone">
            <summary>
            Clones the event. Because the event is retained the cloned event as well as the clone have to be disposed
            </summary>
            <returns>Cloned event</returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.SysIntX2">
             <summary>
            A structure of two integers of platform specific size.
             </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.SysIntX2.X">
            <summary>
            The first coordinate.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.SysIntX2.Y">
            <summary>
            The second coordinate.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX2.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX2.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX2.ToString">
            <summary>
            Gets the string representation of the SysIntX2.
            </summary>
            <returns> The string representation of the SysIntX2. </returns>
        </member>
        <member name="T:Amplifier.OpenCL.Cloo.SysIntX3">
            <summary>
            A structure of three integers of platform specific size.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.SysIntX3.X">
            <summary>
            The first coordinate.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.SysIntX3.Y">
            <summary>
            The second coordinate.
            </summary>
        </member>
        <member name="F:Amplifier.OpenCL.Cloo.SysIntX3.Z">
            <summary>
            The third coordinate.
            </summary>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX3.#ctor(Amplifier.OpenCL.Cloo.SysIntX2,System.Int64)">
            <summary>
            
            </summary>
            <param name="x2"></param>
            <param name="z"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX3.#ctor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Amplifier.OpenCL.Cloo.SysIntX3.ToString">
            <summary>
            Gets the string representation of the SysIntX2.
            </summary>
            <returns> The string representation of the SysIntX2. </returns>
        </member>
        <member name="T:Amplifier.OpenCL.OpenCLFunctions">
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_global_id(System.Int32)">
            <summary>
            Global work item ID value
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_work_dim">
            <summary>
            Number of dimensions in use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_global_size(System.Int32)">
            <summary>
            Number of global work items
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_local_id(System.Int32)">
            <summary>
            Local work item ID
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_local_size(System.Int32)">
            <summary>
            Number of local work items
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_num_groups(System.Int32)">
            <summary>
            Number of work groups
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_group_id(System.Int32)">
            <summary>
            Work group ID
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
        <member name="M:Amplifier.OpenCL.OpenCLFunctions.get_global_offset(System.Int32)">
            <summary>
            Returns the offset values specified in global_work_offset argument to clEnqueueNDRangeKernel. Valid values of dimindx are 0 to get_work_dim() - 1. For other values, get_global_offset() returns 0.
            For clEnqueueTask, this returns 0.
            </summary>
            <param name="dimindx">The dimindx.</param>
            <returns></returns>
        </member>
    </members>
</doc>
